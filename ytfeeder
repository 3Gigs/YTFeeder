#!/bin/bash

#************************************************#
#                 ytfeeder.sh                    #
#                                                #
#           Convert youtube takeout CSVs         #
#           to RSS                               #
#************************************************#

TAKEOUT_LOCATION='' # Youtube takeout location
FRONTEND=''         # TODO: Support alternative frontends
OPML=0              # Whether to output as opml

# --------------------------------------------------------- #
# getChannelIDs ()                                          #
# Echo channel IDs separated by spaces by                   #
# looking through $TAKEOUT_LOCATION                         #
# Parameter:                                                #
#   $1: Takeout csv location                                #
# --------------------------------------------------------- #
getChannelIDs() {
  if [ -f "$1" ] && [ -r "$1" ]; then
    sed -E '1d; s/(,.+)/ /' < "$1"
  fi
}

# --------------------------------------------------------- #
# toRSSYoutube ()                                           #
# Echos youtube RSS feeds                                   #
# Parameter:                                                #
#   $1: Youtube channel IDs, separated by spaces            #
# --------------------------------------------------------- #
toRSSYoutube() {
  until [ -z "$1" ]; do
    echo "https://youtube.com/feeds/videos.xml?channel_id=$1"
    shift
  done
}

# --------------------------------------------------------- #
# toChannels ()                                             #
# Echo channels from takeout csv that                       #
# can be easily splitted                                    #
# Parameter:                                                #
#   $1: Takeout csv location                                #
# --------------------------------------------------------- #
toChannels() {
<<<<<<< HEAD
  local CHANNELS=''
  CHANNELS=$(sed -E '1d' "$1")

  IFS=$'\n'
  for CHANNEL in $CHANNELS; do
    echo "$CHANNEL"
  done
  unset IFS
=======
  sed -E '1d' "$1"
>>>>>>> 723b974c7b18c80c5ef06479c3363cf9e4cc43e6
}

# --------------------------------------------------------- #
# getValFromCSV ()                                          #
# Echo a value from column (separated by commas)            #
# and row (separated by newlines)                           #
# !!! Starts at 1, not 0 !!!                                #
# Parameter:                                                #
#   $1: Row                                                 #
#   $2: Column                                              #
#   $3: CSV                                                 #
# --------------------------------------------------------- #
getValFromCSV() {
  IFS=','
  local ROW=""
<<<<<<< HEAD
  ROW=($(echo "$3" | sed -n "$1p"))
=======
  ROW="($(echo "$3" | sed -n "$1p"))"
>>>>>>> 723b974c7b18c80c5ef06479c3363cf9e4cc43e6
  echo "${ROW[$2 - 1]}"
  unset IFS
}

# --------------------------------------------------------- #
# toOPML ()                                                 #
# Echos an OPML subscription list                           #
# Parameter:                                                #
#   $1: Takeout Location
# --------------------------------------------------------- #
toOPML() {
  local OUTLINES=''
  IFS=$'\n'
  for CHANNEL in $(toChannels "$1"); do
    local C_NAME=''
    local C_ID=''
    C_NAME="$(getValFromCSV 1 3 "$CHANNEL")"
    C_ID="$(getValFromCSV 1 1 "$CHANNEL")"
    OUTLINES+="<outline text="\"$C_NAME\"" title="\"$C_NAME\"" xmlUrl=\""$(toRSSYoutube "$C_ID")\"" />"
  done
  unset IFS

  printf \
    "<opml version=\"2.0\">
<head>
  <title>YouTube Subscriptions</title>
</head>
  <body>
%s
  </body>
</opml>
" \
"$OUTLINES"
}

if [ -n "$1" ]; then
  until [ -z "$1" ]; do
    case $1 in
    '-i' | '--input')
      TAKEOUT_LOCATION="$2"
      shift 2
      ;;
    '-f' | '--front-end')
      FRONTEND="$2"
      shift 2
      ;;
    '-O' | '--opml')
      OPML=1
      shift 1
      ;;
    *)
      echo >&2 "Unknown argument"
      exit 1
      ;;
    esac
  done
  if [ "$OPML" -ne '0' ]; then
    toOPML "$TAKEOUT_LOCATION"
  else
    toRSSYoutube "$(getChannelIDs "$TAKEOUT_LOCATION")"
  fi
else
  echo "Help"
fi
